import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

import django
django.setup()

from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
import asyncio
from aiogram import Bot, Dispatcher, executor, types
import json
from fastapi import FastAPI, Depends, HTTPException, Header, Request
from fastapi.middleware.cors import CORSMiddleware
from aiogram.utils.web_app import safe_parse_webapp_init_data
import logging
from telegram.bot import DeliveryBot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from db.models import Offer, User, Order
from asgiref.sync import sync_to_async


logging.basicConfig(filename='logs.txt', level=logging.DEBUG)

app = FastAPI()

API_TOKEN = '5506739202:AAEj9v8SPTb_faW9kJKsJGudTQlt51EUfX0'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
my_bot = DeliveryBot(bot, dp)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


async def get_init_data(auth: str = Header()):
    logging.debug(auth)
    if auth is None:
        raise HTTPException(status_code=400, detail="Not authorized")
    try:
        data = safe_parse_webapp_init_data(token=API_TOKEN, init_data=auth, _loads=json.loads)
    except ValueError:
        raise HTTPException(status_code=400, detail="Not authorized")
    return data


async def delete_order_on_timeout(message: types.Message, order):
    Bot.set_current(bot)
    await asyncio.sleep(60 * 60)
    await message.edit_text("–ó–∞–∫–∞–∑ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏")
    await sync_to_async(order.delete)()


async def delete_offer_on_timeout(message: types.Message, offer):
    Bot.set_current(bot)
    await asyncio.sleep(60 * 60)
    await message.edit_text("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏")

    await sync_to_async(offer.delete)()


# @app.post("/order")
async def make_order(request: Request, web_init_data=Depends(get_init_data)):
    data = await request.json()
    user = await User.objects.filter(tg_id=web_init_data['user']['id']).afirst()
    if user is None:
        raise HTTPException(status_code=400, detail="Not authorized")
    else:
        order = await sync_to_async(Order.objects.create)(feature_from=data, user=user)
    street = data['properties']['description']
    name = data['properties']['name']
    m = await bot.send_message(user.tg_id,
                           f'üì¶ –ñ–¥—ë–º, –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑\n\n'
                           f'üìç –ú–µ—Å—Ç–æ <b>{name}</b>\n'
                           f'üè¢ –ê–¥—Ä–µ—Å <b>{street}</b>\n\n'
                           f'–ü–∞—Ä—Ç–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑, –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ\n\n'
                           f'–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 1 —á–∞—Å',
                           reply_markup=InlineKeyboardMarkup().add(
                               InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'order_delete:{order.id}')
                           ),
                           parse_mode='HTML')
    asyncio.create_task(delete_order_on_timeout(m, order))

    offers = Offer.objects.filter(feature_from__geometry__coordinates=data['geometry']['coordinates'])
    async for offer in offers:
        m = await bot.send_message(offer.user.tg_id,
                               f'–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑',
                               reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                   InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'order_accept:{order.id}'),
                                   InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'order_decline:{order.id}')
                               ),
                               parse_mode='HTML')
    return {"ok": True}


@app.post("/order")
async def make_order_new(request: Request, web_init_data=Depends(get_init_data)):
    data = await request.json()
    street = data['properties']['description']
    name = data['properties']['name']

    user = await User.objects.filter(tg_id=web_init_data['user']['id']).afirst()
    if user is None:
        raise HTTPException(status_code=400, detail="Not authorized")
    m = await bot.send_message(user.tg_id, f'üì¶ –í–∞—à –∑–∞–∫–∞–∑'
                                           f'üìç –ú–µ—Å—Ç–æ <b>{name}</b>\n'
                                           f'üè¢ –ê–¥—Ä–µ—Å <b>{street}</b>\n\n'
                                           f'–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞',
                                            reply_markup=InlineKeyboardMarkup().add(
                                                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å",
                                                                     switch_inline_query_current_chat='–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫',
                                                                     callback_data=f'new_address')
                                            )
                              )


@app.post("/offer")
async def make_offer(request: Request, web_init_data=Depends(get_init_data)):
    data = await request.json()

    coords = data['geometry']['coordinates']
    street = data['properties']['description']
    name = data['properties']['name']
    user = await User.objects.filter(tg_id=web_init_data['user']['id']).afirst()
    logging.debug(user)
    logging.debug(web_init_data['user']['id'])
    if user is None:
        raise HTTPException(status_code=400, detail="Not authorized")
    else:
        offer = await sync_to_async(Offer.objects.create)(feature_from=data, user=user)
    m = await bot.send_message(web_init_data['user']['id'],
                           'üö¥ –¢–µ–ø–µ—Ä—å –≤—ã –≤ —Ä–æ–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞–º –ø—Ä–æ–¥—É–∫—Ç—ã\n\n'
                           f'üìç –ú–µ—Å—Ç–æ <b>{name}</b>\n'
                           f'üè¢ –ê–¥—Ä–µ—Å <b>{street}</b>.\n\n'
                           f'–ó–∞–∫–∞–∑—á–∏–∫–∏ –±—É–¥—É—Ç –≤—ã—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ\n\n'
                           f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å',
                           reply_markup=InlineKeyboardMarkup().add(
                               InlineKeyboardButton("‚ùå –ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã", callback_data=f'offer_delete:{offer.id}')
                           ),
                           parse_mode='HTML')
    asyncio.create_task(delete_offer_on_timeout(m, offer))

    orders = Order.objects.filter(feature_from__geometry__coordinates=data['geometry']['coordinates'])
    async for order in orders:
        await bot.send_message(web_init_data["user"]["id"],
                               f'–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑',
                               reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                   InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'order_accept:{order.id}'),
                                   InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'order_decline:{order.id}')
                               ),
                               parse_mode='HTML')
    return {"ok": True}


@app.get("/offers")
async def get_offers(request: Request, web_init_data=Depends(get_init_data)):
    res = [i.feature_from async for i in Offer.objects.all()]
    return {"ok": True, 'features': res}


@app.get("/orders")
async def get_offers(request: Request, web_init_data=Depends(get_init_data)):
    res = [i.feature_from async for i in Order.objects.all()]
    return {"ok": True, 'features': res}


@app.on_event("startup")
async def startup_event():
    asyncio.create_task(my_bot.start())
    # ...
