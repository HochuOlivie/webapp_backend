from aiogram import types
from aiogram import Bot, Dispatcher
from aiogram.types import InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from asgiref.sync import sync_to_async

from db.models import User, PartnerReview, CustomerReview
from initialize import url
from . import keyboards
from . import callback_consts as cbc
from aiogram.dispatcher import FSMContext
from .state import States
from django.db.models import Avg


class Registration:
    def __init__(self, bot, dp):
        self.bot: Bot = bot
        self.dp: Dispatcher = dp

    def register_commands(self):
        ...
        self.dp.register_message_handler(self._start_handler, commands=["start"], state="*")
        self.dp.register_message_handler(self._profile_handler, text="üó∫ –ü—Ä–æ—Ñ–∏–ª—å", state="*")

    def register_handlers(self):
        ...
        self.dp.register_message_handler(self._contact_handler, content_types=['contact'], state=States.phone)

        # self.dp.register_callback_query_handler(self._contact_handler, text=cbc.phone, state="*")

    async def _start_handler(self, message: types.Message):
        if User.objects.filter(tg_id=message.from_user.id).exists():
            await self.bot.send_message(message.from_user.id, "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å",
                                        reply_markup=InlineKeyboardMarkup()
                                        .add(
                                            InlineKeyboardMarkup(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
                                                                 web_app=WebAppInfo(url=url)
                                                                 )
                                        )
                                        )
            return
        msg = '''–ü—Ä–∏–≤–µ—Ç üëã
–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ª—é–±—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –∫–∞–∫ –≤ —Ä–æ–ª–∏ –∫—É—Ä—å–µ—Ä–∞, —Ç–∞–∫ –∏ –≤ —Ä–æ–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞.
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞'''
        phone_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        phone_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        phone_keyboard.add(phone_button)

        await self.bot.send_message(message.from_user.id, msg, reply_markup=phone_keyboard)
        await States.phone.set()

    async def _contact_handler(self, message: types.Message, state: FSMContext):
        msg = '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π <b>–ü—Ä–æ—Ñ–∏–ª—å</b>, ' \
              '–æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ'

        phone = message.contact.phone_number

        User.objects.create(
            tg_id=message.from_user.id,
            tg_username=message.from_user.username,
            phone=phone,
        )

        await state.update_data(phone=phone)
        await self.bot.send_message(message.from_user.id, msg,
                                    reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
                                        KeyboardButton("üó∫ –ü—Ä–æ—Ñ–∏–ª—å")
                                    ),
                                    parse_mode='HTML',
                                    )
        await self.bot.send_message(message.from_user.id, "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å",
                                    reply_markup=InlineKeyboardMarkup()
                                    .add(InlineKeyboardMarkup(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=url)))
                                    )

    async def _profile_handler(self, message: types.Message, state: FSMContext):
        user = await User.objects.filter(tg_id=message.from_user.id).afirst()
        msg = "‚≠êÔ∏è –í–∞—à—ã –æ—Ç–∑—ã–≤—ã\n"
        pr = PartnerReview.objects.filter(user=user)
        cr = CustomerReview.objects.filter(user=user)
        if pr:
            msg += f"–ü–∞—Ä—Ç–Ω–µ—Ä: {pr.aggregate(Avg('points'))['points__avg']:.2f}\n"
        if cr:
            msg += f"–ó–∞–∫–∞–∑—á–∏–∫: {cr.aggregate(Avg('points'))['points__avg']:.2f}\n"
        if not cr and not pr:
            msg += "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòî\n"
        msg += '\n*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>'
        await self.bot.send_message(message.from_user.id, msg,
                                    reply_markup=InlineKeyboardMarkup()
                                    .add(
                                        InlineKeyboardMarkup(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
                                                             web_app=WebAppInfo(url=url)
                                                             )
                                    ),
                                    parse_mode='HTML'
                                    )
        await state.finish()
